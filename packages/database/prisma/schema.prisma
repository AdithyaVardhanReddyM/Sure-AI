// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum ConversationStatus {
  notEscalated
  escalated
}

enum Role {
  humanAgent
  assistant
  user
}

model Agent {
  id                String           @id @default(uuid())
  name              String
  clerkId           String
  CalEnabled        Boolean?
  StripeEnabled     Boolean?
  SlackEnabled      Boolean?
  CalUrl            String?
  STRIPE_API_KEY    String?          @db.Text
  SLACK_BOT_TOKEN   String?          @db.Text
  SLACK_TEAM_ID     String?          @db.Text
  SLACK_CHANNEL_IDS String?          @db.Text
  contactSessions   ContactSession[]
}

model ContactSession {
  id        String @id @default(uuid())
  name      String
  email     String
  agentId   String
  agent     Agent  @relation(fields: [agentId], references: [id])
  expiresAt BigInt
  metadata  Json?

  @@index([expiresAt])
  @@index([agentId])
}

model Conversation {
  id               String             @id @default(uuid())
  // threadId         String
  agentId          String
  contactSessionId String
  status           ConversationStatus
  createdAt        DateTime           @default(now())
  messages         Message[]

  @@index([agentId])
  // @@index([threadId])
  @@index([contactSessionId])
  @@index([status, agentId])
}

model Message {
  id               String       @id @default(uuid())
  conversationId   String
  contactSessionId String
  role             Role
  content          String       @db.Text
  createdAt        DateTime     @default(now())
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([contactSessionId])
}

model Files {
  id        String  @id @default(uuid())
  agentId   String?
  fileUrl   String
  fileName  String
  userId    String
  processed Boolean @default(false)
}

model WidgetSettings {
  id                       String  @id @default(uuid())
  agentId                  String
  conversationStartMessage String?
  suggestion               Json?
  links                    Json?

  @@index([agentId])
}

model Embeddings {
  id             String                      @id @default(uuid())
  agentId        String
  text           String                      @db.Text
  vectorMetadata Json?
  vector         Unsupported("vector(1024)")
  createdAt      DateTime                    @default(now())

  @@index([agentId])
}
